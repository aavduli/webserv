PARSER
- Receives stream content
- Parses and stores in classes

Class Hierarchy Tree:
└── HttpMessage (base class)
    ├── private:
    │   ├── double http_version
    │   ├── HttpHeaders headers
    │   └── std::string body
    └── public methods:
        ├── getHttpVersion() const
        ├── setHttpVersion(double& version)
        ├── getHeaders() const
        ├── setHeaders(const std::map<std::string, std::string>& fields)
        ├── getBody() const
        └── setBody(const std::string& body) const
    │
    ├── HttpRequest (inherits from HttpMessage)
    │   └── private:
    │       ├── HttpMethod method
    │       └── std::string uri
    │
    └── HttpResponse (inherits from HttpMessage)
        └── private:
            ├── std::map<int, std::string> status [option 1]
            ├── int status_code + std::string reason_phrase [option 2]
            └── ResponseStatus status [option 3 - enum]

Standalone Classes:
└── HttpHeaders
    ├── private:
    │   └── std::map<std::string, std::string> fields
    └── public methods:
        ├── getValue(const std::string& key) const
        └── setValue(const std::string& key, const std::string& value)